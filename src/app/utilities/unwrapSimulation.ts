import { Simulation, SimulationBindingType } from '../models';

/**
 * Add the modelIds and dataSourceIds to the object because they are not provided by the backend
 */
export function unwrapSimulation<T extends Simulation>(input: T): T {
  const simulation: Simulation = input;
  // simulation.foodProductId = simulation.foodProduct.id;
  simulation.modelIds = simulation.models.map((model) => model.id);
  simulation.dataSourceIds = simulation.dataSources.map((dataSource) => dataSource.id);
  unwrapBindings(simulation);

  return { ...simulation, ...input };
}

/**
 * Add source_column_array to the fixed simulation bindings, based on the content 
 * of source_name. The source_name is assumed to contain multiple 
 * values split by a | character (as generated by #bindingsFixedArraytoString).
 * 
 * @param input the Simulation object containing the fixed bindings
 */
export function unwrapBindings<T extends Simulation>(input: T): void {
  input.bindings.forEach((binding) => {
    binding.columns.forEach((column) => {
      column.sourceType = column.sourceType as SimulationBindingType;
      if (column.sourceType == SimulationBindingType.fixed) {
        column.sourceColumnArray = column.sourceName.split('|');
      }
      column.selectedSource = {
        sourceName: column.sourceName,
        sourceUri: column.sourceUri,
        sourceArgumentName: column.sourceArgumentName,
        sourceArgumentUri: column.sourceArgumentUri,
        sourceColumnName: column.sourceColumnName,
        sourceColumnUri: column.sourceColumnUri
      };
    });
  });
}

/**
 * Move the items in source_column_array to source_label as a string joined 
 * with | characters.
 * 
 * @param input the Simulation object containing the fixed bindings
 */
export function wrapBindings<T extends Simulation>(input: T): T {
  input.bindings.forEach((binding) => {
    binding.columns.forEach((column) => {
      if (column.sourceType == SimulationBindingType.fixed) {
        column.sourceName = column.sourceColumnArray.join('|');
      } else {
        column.sourceName = column.selectedSource.sourceName;
      }
      column.sourceUri = column.selectedSource.sourceUri;
      column.sourceArgumentName = column.selectedSource.sourceArgumentName;
      column.sourceArgumentUri = column.selectedSource.sourceArgumentUri;
      column.sourceColumnName = column.selectedSource.sourceColumnName;
      column.sourceColumnUri = column.selectedSource.sourceColumnUri;
    });
  });
  return input;
}